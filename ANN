######### NEURAL NETWORKS #######################################
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from scipy.stats import pearsonr

#X_1 for X pos and X_2 for Y pos
#X_3 for velocity X pos, X_4 for velocity Y pos
df_regression = pd.read_csv("regression_dataset.csv")
y = df_regression.iloc[:, :4].values  # The first 4 columns are targets (position and velocity)
X = df_regression.iloc[:, 4:].values  # The last 96 columns are channel data

# Normalize features
scaler = StandardScaler()
X_normalized = scaler.fit_transform(X)
# Split into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X_normalized, y, test_size=0.2, random_state=42)

# Convert to PyTorch tensors
X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32)

# Create data loaders
train_data = TensorDataset(X_train_tensor, y_train_tensor)
test_data = TensorDataset(X_test_tensor, y_test_tensor)
train_loader = DataLoader(train_data, batch_size=64, shuffle=True)
test_loader = DataLoader(test_data, batch_size=64, shuffle=False)

##setting neural network
class NeuralNetwork(nn.Module):
    def __init__(self):
        super(NeuralNetwork, self).__init__()
        self.fc1 = nn.Linear(95, 150)  # 96 input features, 128 neurons in first hidden layer
        self.fc2 = nn.Linear(150, 80)  # Second hidden layer
        self.fc3 = nn.Linear(80, 4)    # 4 output features (position and velocity)

    def forward(self, x):
        x = torch.relu(self.fc1(x))
        x = torch.relu(self.fc2(x))
        x = self.fc3(x)
        return x

model = NeuralNetwork()


##Training the network
criterion = nn.MSELoss()  # Mean Squared Error Loss
optimizer = optim.Adam(model.parameters(), lr=0.001)

# Training loop
for epoch in range(100):  # number of epochs
    for inputs, targets in train_loader:
        optimizer.zero_grad()
        outputs = model(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()

 ##evaluating the network

model.eval()  # Set the model to evaluation mode
total_mse = 0
pearson_correlation = []

with torch.no_grad():
    for inputs, targets in test_loader:
        outputs = model(inputs)
        mse = criterion(outputs, targets).item()
        total_mse += mse

        for output, target in zip(outputs, targets):
                correlation, _ = pearsonr(output.numpy(), target.numpy())
                pearson_correlation.append(correlation)    

average_mse = total_mse / len(test_loader.dataset)
average_pearson_correlation = sum(pearson_correlation) / len(pearson_correlation)

print(f'Mean Square Error: {average_mse}')       
print(f'Pearson Correlation: {average_pearson_correlation}')  
